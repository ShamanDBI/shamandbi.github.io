===================
System Call Tracing
===================

This is callback is triggered of the Framework that gives you control over the Kernel resources used by the Tracee.

A syscall is the API interface between User and Kernel, through which the User requests a service from the Kernel of the Operating System.

This interface allows you to stop and inspect the system call before and after it is made.

1. When a process interacts with the operating system's rich functionality, it makes system calls for tasks such as creating and editing files, and networking functions. Since Linux and other Unix-like OS have a standard Kernel interface, you can intercept every request that goes to the Kernel and comes back.
2. To take advantage of this feature, you can override the `SyscallHandler` class.
3. System call data is captured in the `SyscallTraceData` class.

When to Use It?
===============

Use this feature when you want to stop the process before and after the system call is executed. You can log the data, change the parameters, or return data to the Tracee process.

1. Log the parameters and return type of the syscall.
2. Change the parameters and return data of the syscall.
3. Reject the syscall from executing and return a value of your choice.
4. Emulate the syscall without actually executing it and return a fake value.
5. Note that you cannot change the syscall number or the parameters.

Keep In Mind
============

There is a performance cost associated with syscall handling.

Sample Code
===========

